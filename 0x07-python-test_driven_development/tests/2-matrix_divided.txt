>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided([[2,4], [8,16]], 2) # doctest: +NORMALIZE_WHITESPACE
[[1.0,  2.0], [4.0, 8.0]]

>>> matrix_divided([[2,4], [8,16]], 2) # doctest: +NORMALIZE_WHITESPACE
[[1.0,  2.0], [4.0, 8.0]]

>>> matrix_divided([[1,2], [3,4], [5,6]], 2)
[[0.5, 1.0], [1.5, 2.0], [2.5, 3.0]]

>>> matrix_divided([[1.,2.], [3.,4.], [5.,6.]], 2)
[[0.5, 1.0], [1.5, 2.0], [2.5, 3.0]]

>>> matrix_divided([[1,2], [4, 5]], 0) #doctest: +ELLIPSIS
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided([[1, 2, 3]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided([[], []], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided("NOT A FUCKING STRING", 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError:...

>>> matrix_divided(["NOT A FUCKING STRING"], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError:...

>>> matrix_divided([], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError:...

>>> matrix_divided([], [], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: matrix_divided() takes 2 positional arguments but 3 were given

>>> matrix_divided([[0,1], ["string", "test"]], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([["0","1"], ["string", "test"]], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([["sds","fsd"], [4, 5]], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 3], [1]], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 3], [1]], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[None, None], [8, 20]], 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1,2], [float('inf'), 5]], 1)
[[1.0, 2.0], [inf, 5.0]]

>>> matrix_divided([[1,2], [float('inf'), 5]], 1)
[[1.0, 2.0], [inf, 5.0]]

>>> matrix_divided([[1,2], [-float('inf'), 5]], 1)
[[1.0, 2.0], [-inf, 5.0]]

>>> matrix_divided([[1,2], [-float('-inf'), 5]], 1)
[[1.0, 2.0], [inf, 5.0]]

>>> matrix_divided([[1,2], [4, 5]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

>>> matrix_divided([[1, 2, 3]], 3.0 ** 1024)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
OverflowError: (34, 'Numerical result out of range')

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, "string")
	Traceback (most recent call last):
	TypeError: div must be a number

Test div as 0:

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

Test non list argument:

	>>> matrix = "Not a matrix"
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test empty list:

	>>> matrix = []
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing non list elements:

	>>> matrix = ["Not", "list", 4]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing lists with no elements:

	>>> matrix = [[], []]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing lists with varying amount of elements:

	>>> matrix = [[1, 3], [1]]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Test list containing lists with non integer/float elements:

	>>> matrix = [["not", "a"], ["integer", "float"]]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing lists with just integers:

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test list containing lists with just floats:

	>>> matrix = [[1.3, 2.5, 3.4], [4.3, 5.8, 6.9]]
	>>> matrix_divided(matrix, 3)
	[[0.43, 0.83, 1.13], [1.43, 1.93, 2.3]]

